{"version":3,"sources":["index.js"],"names":["document","title","nerdEmojis","NerdBackground","emojis","setEmojis","useState","useEffect","numberOfEmojis","length","newEmojis","i","push","emoji","left","Math","random","animationDelay","animationDuration","fontSize","React","createElement","className","map","emojiData","index","key","style","App","gameState","setGameState","countdown","setCountdown","timer","setTimeout","clearTimeout","onClick","handleStart","Quiz","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","timeLeft","setTimeLeft","quizEnded","setQuizEnded","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","fetchQuestions","async","response","fetch","ok","Error","fetchedQuestions","json","results","q","question","decodeEntities","answers","incorrect_answers","correct_answer","correct","forEach","shuffleArray","error","console","array","j","floor","text","textArea","innerHTML","value","restartQuiz","id","answer","checkAnswer","disabled","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.86f9b6d8.chunk.js","sourcesContent":["///////////////////////\n// Welcome to Cursor //\n///////////////////////\n\n/*\nStep 1: Try generating a react component that lets you play tictactoe with Cmd+K or Ctrl+K on a new line.\n  - Then integrate it into the code below and run with npm start\n\nStep 2: Try highlighting all the code with your mouse, then hit Cmd+k or Ctrl+K. \n  - Instruct it to change the game in some way (e.g. add inline styles, add a start screen, make it 4x4 instead of 3x3)\n\nStep 3: Hit Cmd+L or Ctrl+L and ask the chat what the code does\n\nStep 4: To try out cursor on your own projects, go to the file menu (top left) and open a folder.\n*/\n\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n\n// Set the document title\ndocument.title = 'Random Popquiz';\n\nconst nerdEmojis = ['🤓', '🧠', '👨‍🔬', '👩‍🔬', '🤖', '💻', '📚'];\n\nfunction NerdBackground() {\n  const [emojis, setEmojis] = useState([]);\n\n  useEffect(() => {\n    const numberOfEmojis = nerdEmojis.length * 4; // 4x more emojis\n    const newEmojis = [];\n\n    for (let i = 0; i < numberOfEmojis; i++) {\n      newEmojis.push({\n        emoji: nerdEmojis[i % nerdEmojis.length],\n        left: `${Math.random() * 100}%`,\n        animationDelay: `${Math.random() * 5}s`,\n        animationDuration: `${Math.random() * 5 + 10}s`, // 10-15s duration\n        fontSize: `${Math.random() * 40 + 40}px`, // 40px to 80px\n      });\n    }\n\n    setEmojis(newEmojis);\n  }, []);\n\n  return (\n    <div className=\"nerd-background\">\n      {emojis.map((emojiData, index) => (\n        <span \n          key={index} \n          className=\"falling-emoji\" \n          style={{\n            left: emojiData.left,\n            animationDelay: emojiData.animationDelay,\n            animationDuration: emojiData.animationDuration,\n            fontSize: emojiData.fontSize,\n          }}\n        >\n          {emojiData.emoji}\n        </span>\n      ))}\n    </div>\n  );\n}\n\nfunction App() {\n  const [gameState, setGameState] = useState('start'); // 'start', 'countdown', or 'quiz'\n  const [countdown, setCountdown] = useState(5);\n\n  const handleStart = () => {\n    setGameState('countdown');\n  };\n\n  useEffect(() => {\n    let timer;\n    if (gameState === 'countdown' && countdown > 0) {\n      timer = setTimeout(() => setCountdown(countdown - 1), 1000);\n    } else if (gameState === 'countdown' && countdown === 0) {\n      setGameState('quiz');\n    }\n    return () => clearTimeout(timer);\n  }, [gameState, countdown]);\n\n  return (\n    <div className=\"App\">\n      <NerdBackground />\n      {gameState === 'start' && (\n        <div className=\"App-header\">\n          <h1>Random Popquiz</h1>\n          <button onClick={handleStart} className=\"start-button\">\n            Click to start\n          </button>\n        </div>\n      )}\n      {gameState === 'countdown' && (\n        <div className=\"countdown-container\">\n          <h2>Get Ready!</h2>\n          <div className=\"countdown\">{countdown}</div>\n        </div>\n      )}\n      {gameState === 'quiz' && <Quiz />}\n    </div>\n  );\n}\n\nfunction Quiz() {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(40);\n  const [quizEnded, setQuizEnded] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  useEffect(() => {\n    if (timeLeft > 0 && !quizEnded) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0 && !quizEnded) {\n      setQuizEnded(true);\n    }\n  }, [timeLeft, quizEnded]);\n\n  const fetchQuestions = async () => {\n    try {\n      const response = await fetch('https://opentdb.com/api.php?amount=10&difficulty=medium');\n      if (!response.ok) {\n        throw new Error('Failed to fetch questions');\n      }\n      const data = await response.json();\n      const fetchedQuestions = data.results.map(q => ({\n        question: decodeEntities(q.question),\n        answers: [...q.incorrect_answers, q.correct_answer].map(decodeEntities),\n        correct: decodeEntities(q.correct_answer)\n      }));\n      fetchedQuestions.forEach(q => shuffleArray(q.answers));\n      setQuestions(fetchedQuestions);\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n    }\n  };\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  const decodeEntities = (text) => {\n    const textArea = document.createElement('textarea');\n    textArea.innerHTML = text;\n    return textArea.value;\n  };\n\n  const checkAnswer = (answer) => {\n    setSelectedAnswer(answer);\n    const currentQ = questions[currentQuestion];\n    const correct = answer === currentQ.correct;\n    setIsCorrect(correct);\n\n    if (correct) {\n      setScore(score + 1);\n    }\n\n    // Wait for a moment before moving to the next question\n    setTimeout(() => {\n      if (currentQuestion + 1 < questions.length) {\n        setCurrentQuestion(currentQuestion + 1);\n        setTimeLeft(40); // Reset timer for next question\n        setSelectedAnswer(null);\n        setIsCorrect(null);\n      } else {\n        setQuizEnded(true);\n      }\n    }, 1000); // Wait for 1 second\n  };\n\n  const restartQuiz = () => {\n    setCurrentQuestion(0);\n    setScore(0);\n    setTimeLeft(40);\n    setQuizEnded(false);\n    fetchQuestions();\n  };\n\n  if (questions.length === 0) {\n    return <div>Loading questions...</div>;\n  }\n\n  if (quizEnded) {\n    return (\n      <div className=\"quiz-container\">\n        <h2>{score > 5 ? 'Congratulations!' : 'Quiz Completed'}</h2>\n        <p>Your final score is: {score} / {questions.length}</p>\n        <button className=\"try-again-btn\" onClick={restartQuiz}>\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  const question = questions[currentQuestion];\n\n  return (\n    <div className=\"quiz-container\">\n      <div className=\"score-timer-container\">\n        <div id=\"score\">Score: {score} / {questions.length}</div>\n        <div id=\"timer\">Time: {timeLeft}</div>\n      </div>\n      <div className=\"question\">\n        <h2>Question {currentQuestion + 1}:</h2>\n        <p>{question.question}</p>\n        <div className=\"answers\">\n          {question.answers.map((answer, index) => (\n            <button\n              key={index}\n              onClick={() => checkAnswer(answer)}\n              className={`\n                ${selectedAnswer === answer ? (isCorrect ? 'correct' : 'incorrect') : ''}\n                ${selectedAnswer && answer === question.correct ? 'correct' : ''}\n              `}\n              disabled={selectedAnswer !== null}\n            >\n              {answer}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// reportWebVitals();"],"sourceRoot":""}