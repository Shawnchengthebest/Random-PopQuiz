{"version":3,"sources":["index.js"],"names":["document","title","nerdEmojis","NerdBackground","emojis","setEmojis","useState","useEffect","numberOfEmojis","length","newEmojis","i","push","emoji","left","Math","random","animationDelay","animationDuration","fontSize","React","createElement","className","map","emojiData","index","key","style","App","onClick","handleStart","window","open","write","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"6KAAA,iDAuBAA,SAASC,MAAQ,iBAEjB,MAAMC,EAAa,CAAC,eAAM,eAAM,iCAAS,iCAAS,eAAM,eAAM,gBAE9D,SAASC,IACP,MAAOC,EAAQC,GAAaC,mBAAS,IAmBrC,OAjBAC,oBAAU,KACR,MAAMC,EAAqC,EAApBN,EAAWO,OAC5BC,EAAY,GAElB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAgBG,IAClCD,EAAUE,KAAK,CACbC,MAAOX,EAAWS,EAAIT,EAAWO,QACjCK,KAAyB,IAAhBC,KAAKC,SAAR,IACNC,eAAmC,EAAhBF,KAAKC,SAAR,IAChBE,kBAAsC,EAAhBH,KAAKC,SAAe,GAAvB,IACnBG,SAA6B,GAAhBJ,KAAKC,SAAgB,GAAxB,OAIdX,EAAUK,IACT,IAGDU,IAAAC,cAAA,OAAKC,UAAU,mBACZlB,EAAOmB,IAAI,CAACC,EAAWC,IACtBL,IAAAC,cAAA,QACEK,IAAKD,EACLH,UAAU,gBACVK,MAAO,CACLb,KAAMU,EAAUV,KAChBG,eAAgBO,EAAUP,eAC1BC,kBAAmBM,EAAUN,kBAC7BC,SAAUK,EAAUL,WAGrBK,EAAUX,SAOrB,SAASe,IAqTP,OACER,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAClB,EAAc,MACfiB,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,UAAI,kBACJD,IAAAC,cAAA,UAAQQ,QAzTMC,KACCC,OAAOC,KAAK,GAAI,UACxBhC,SAASiC,MAAM,khVAuTQX,UAAU,gBAAe,oBAQlDY,IAASC,WAAWnC,SAASoC,eAAe,SACpDC,OACHjB,IAAAC,cAACD,IAAMkB,WAAU,KACflB,IAAAC,cAACO,EAAG,U","file":"static/js/main.9a0e1948.chunk.js","sourcesContent":["///////////////////////\n// Welcome to Cursor //\n///////////////////////\n\n/*\nStep 1: Try generating a react component that lets you play tictactoe with Cmd+K or Ctrl+K on a new line.\n  - Then integrate it into the code below and run with npm start\n\nStep 2: Try highlighting all the code with your mouse, then hit Cmd+k or Ctrl+K. \n  - Instruct it to change the game in some way (e.g. add inline styles, add a start screen, make it 4x4 instead of 3x3)\n\nStep 3: Hit Cmd+L or Ctrl+L and ask the chat what the code does\n\nStep 4: To try out cursor on your own projects, go to the file menu (top left) and open a folder.\n*/\n\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n\n// Set the document title\ndocument.title = 'Random Popquiz';\n\nconst nerdEmojis = ['🤓', '🧠', '👨‍🔬', '👩‍🔬', '🤖', '💻', '📚'];\n\nfunction NerdBackground() {\n  const [emojis, setEmojis] = useState([]);\n\n  useEffect(() => {\n    const numberOfEmojis = nerdEmojis.length * 4; // 4x more emojis\n    const newEmojis = [];\n\n    for (let i = 0; i < numberOfEmojis; i++) {\n      newEmojis.push({\n        emoji: nerdEmojis[i % nerdEmojis.length],\n        left: `${Math.random() * 100}%`,\n        animationDelay: `${Math.random() * 5}s`,\n        animationDuration: `${Math.random() * 5 + 10}s`, // 10-15s duration\n        fontSize: `${Math.random() * 40 + 40}px`, // 40px to 80px\n      });\n    }\n\n    setEmojis(newEmojis);\n  }, []);\n\n  return (\n    <div className=\"nerd-background\">\n      {emojis.map((emojiData, index) => (\n        <span \n          key={index} \n          className=\"falling-emoji\" \n          style={{\n            left: emojiData.left,\n            animationDelay: emojiData.animationDelay,\n            animationDuration: emojiData.animationDuration,\n            fontSize: emojiData.fontSize,\n          }}\n        >\n          {emojiData.emoji}\n        </span>\n      ))}\n    </div>\n  );\n}\n\nfunction App() {\n  const handleStart = () => {\n    const quizWindow = window.open('', '_blank');\n    quizWindow.document.write(`\n      <html>\n        <head>\n          <title>Random Popquiz</title>\n          <style>\n            body {\n              background-color: #FFFF00;\n              margin: 0;\n              padding: 20px;\n              font-family: Arial, sans-serif;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              height: 100vh;\n              transition: background-color 0.5s ease;\n            }\n            #countdown {\n              font-size: 100px;\n              color: black;\n              text-align: center;\n            }\n            #quiz-content {\n              display: none;\n              width: 100%;\n              max-width: 600px;\n            }\n            h1 {\n              color: black;\n              text-align: center;\n            }\n            .question {\n              background-color: #E6D000;\n              border-radius: 10px;\n              padding: 20px;\n              margin-bottom: 20px;\n              box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            }\n            button {\n              display: block;\n              width: 100%;\n              padding: 10px;\n              margin-top: 10px;\n              background-color: rgba(255, 255, 255, 0.6);\n              color: black;\n              border: none;\n              border-radius: 5px;\n              cursor: pointer;\n              transition: background-color 0.3s;\n            }\n            button:hover {\n              background-color: rgba(255, 255, 255, 0.8);\n            }\n            .correct {\n              background-color: rgba(76, 175, 80, 0.8) !important;\n            }\n            .incorrect {\n              background-color: rgba(244, 67, 54, 0.8) !important;\n            }\n            #score {\n              position: fixed;\n              top: 20px;\n              right: 20px;\n              background-color: rgba(0, 0, 0, 0.7);\n              color: white;\n              padding: 10px 15px;\n              border-radius: 5px;\n              font-size: 18px;\n              font-weight: bold;\n              z-index: 1000;\n            }\n            #timer {\n              position: fixed;\n              bottom: 20px;\n              right: 20px;\n              background-color: rgba(0, 0, 0, 0.7);\n              color: white;\n              padding: 10px 15px;\n              border-radius: 5px;\n              font-size: 18px;\n              font-weight: bold;\n              z-index: 1000;\n            }\n\n            .confetti {\n              position: absolute;\n              width: 10px;\n              height: 10px;\n              background-color: #f2d74e;\n              opacity: 0;\n            }\n\n            @keyframes confetti-fall {\n              0% { transform: translateY(0) rotate(0deg); opacity: 1; }\n              100% { transform: translateY(100vh) rotate(720deg); opacity: 0; }\n            }\n\n            .try-again-btn {\n              display: inline-block;\n              padding: 10px 20px;\n              font-size: 16px;\n              background-color: #4CAF50;\n              color: white;\n              border: none;\n              border-radius: 5px;\n              cursor: pointer;\n              transition: background-color 0.3s;\n            }\n\n            .try-again-btn:hover {\n              background-color: #45a049;\n            }\n          </style>\n        </head>\n        <body>\n          <div id=\"score\">Score: 0 / 0</div>\n          <div id=\"timer\">Time: 40</div>\n          <div id=\"countdown\">3</div>\n          <div id=\"quiz-content\">\n            <h1>Random Popquiz</h1>\n            <div id=\"question-container\"></div>\n          </div>\n          <script>\n            let questions = [];\n            let currentQuestion = 0;\n            let score = 0;\n            let timer;\n            let timeLeft = 40;\n\n            async function fetchQuestions() {\n              try {\n                const response = await fetch('https://opentdb.com/api.php?amount=10&type=multiple');\n                if (!response.ok) {\n                  throw new Error('Failed to fetch questions');\n                }\n                const data = await response.json();\n                questions = data.results.map(q => ({\n                  question: q.question,\n                  answers: [...q.incorrect_answers, q.correct_answer],\n                  correct: q.correct_answer\n                }));\n                questions.forEach(q => shuffleArray(q.answers));\n                shuffleArray(questions);\n                updateScore();\n                startQuiz();\n              } catch (error) {\n                console.error('Error fetching questions:', error);\n                document.getElementById('question-container').innerHTML = '<p>Failed to load questions. Please try again later.</p>';\n              }\n            }\n\n            function shuffleArray(array) {\n              for (let i = array.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [array[i], array[j]] = [array[j], array[i]];\n              }\n            }\n\n            function startQuiz() {\n              document.getElementById('countdown').style.display = 'none';\n              document.getElementById('quiz-content').style.display = 'block';\n              showQuestion();\n              startTimer();\n            }\n\n            function showQuestion() {\n              document.body.style.backgroundColor = '#FFFF00';\n              const questionContainer = document.getElementById('question-container');\n              const question = questions[currentQuestion];\n              let html = \\`\n                <div class=\"question\">\n                  <h2>Question \\${currentQuestion + 1}:</h2>\n                  <p>\\${decodeEntities(question.question)}</p>\n                  \\${question.answers.map(answer => \\`\n                    <button onclick=\"checkAnswer(this, '\\${question.correct}')\">\\${decodeEntities(answer)}</button>\n                  \\`).join('')}\n                </div>\n              \\`;\n              questionContainer.innerHTML = html;\n              timeLeft = 40;\n              updateTimer();\n            }\n\n            function decodeEntities(text) {\n              const textArea = document.createElement('textarea');\n              textArea.innerHTML = text;\n              return textArea.value;\n            }\n\n            function checkAnswer(button, correctAnswer) {\n              clearInterval(timer);\n              const buttons = button.parentElement.getElementsByTagName('button');\n              for (let btn of buttons) {\n                btn.disabled = true;\n                if (btn.textContent === correctAnswer) {\n                  btn.classList.add('correct');\n                }\n              }\n              if (button.textContent === correctAnswer) {\n                score++;\n                button.classList.add('correct');\n              } else {\n                button.classList.add('incorrect');\n              }\n              updateScore();\n              setTimeout(nextQuestion, 2000);\n            }\n\n            function nextQuestion() {\n              currentQuestion++;\n              if (currentQuestion < questions.length) {\n                showQuestion();\n                startTimer();\n              } else {\n                endQuiz();\n              }\n            }\n\n            function startTimer() {\n              timer = setInterval(() => {\n                timeLeft--;\n                updateTimer();\n                if (timeLeft === 0) {\n                  clearInterval(timer);\n                  document.body.style.backgroundColor = '#B8B800';\n                  setTimeout(() => {\n                    nextQuestion();\n                  }, 1000);\n                }\n              }, 1000);\n            }\n\n            function updateTimer() {\n              document.getElementById('timer').textContent = \\`Time: \\${timeLeft}\\`;\n            }\n\n            function updateScore() {\n              document.getElementById('score').textContent = \\`Score: \\${score} / \\${questions.length}\\`;\n            }\n\n            function endQuiz() {\n              clearInterval(timer);\n              document.getElementById('timer').style.display = 'none';\n              \n              if (score > 5) {\n                document.getElementById('question-container').innerHTML = \\`\n                  <h2>Congratulations!</h2>\n                  <p>Your final score is: \\${score} / \\${questions.length}</p>\n                \\`;\n                createConfetti();\n              } else {\n                document.getElementById('question-container').innerHTML = \\`\n                  <h2>Quiz Completed</h2>\n                  <p>Your final score is: \\${score} / \\${questions.length}</p>\n                  <p>Better luck next time!</p>\n                  <button class=\"try-again-btn\" onclick=\"restartQuiz()\">Try Again</button>\n                \\`;\n              }\n            }\n\n            function createConfetti() {\n              const confettiCount = 200;\n              const colors = ['#f2d74e', '#95c3de', '#ff9a91', '#f2b2f2', '#cefc86'];\n\n              for (let i = 0; i < confettiCount; i++) {\n                const confetti = document.createElement('div');\n                confetti.className = 'confetti';\n                confetti.style.left = Math.random() * 100 + 'vw';\n                confetti.style.animationDuration = Math.random() * 3 + 2 + 's';\n                confetti.style.animationDelay = Math.random() * 5 + 's';\n                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n                confetti.style.animation = 'confetti-fall linear forwards';\n                document.body.appendChild(confetti);\n\n                setTimeout(() => {\n                  document.body.removeChild(confetti);\n                }, 5000);\n              }\n            }\n\n            function restartQuiz() {\n              currentQuestion = 0;\n              score = 0;\n              updateScore();\n              fetchQuestions();\n            }\n\n            let count = 3;\n            const countdownElement = document.getElementById('countdown');\n            \n            function updateCountdown() {\n              countdownElement.textContent = count;\n              if (count > 0) {\n                count--;\n                setTimeout(updateCountdown, 1000);\n              } else {\n                fetchQuestions();\n              }\n            }\n            \n            updateCountdown();\n          </script>\n        </body>\n      </html>\n    `);\n  };\n\n  return (\n    <div className=\"App\">\n      <NerdBackground />\n      <div className=\"App-header\">\n        <h1>Random Popquiz</h1>\n        <button onClick={handleStart} className=\"start-button\">\n          Click to start\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// reportWebVitals();"],"sourceRoot":""}